name: terraform

on:
  pull_request:
  push:
    branches: [ "main" ]

permissions:
  id-token: write   # needed for OIDC
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  TF_STATE_TABLE: ${{ secrets.TF_STATE_TABLE }}

jobs:
  terraform:
    name: Terraform Plan/Apply
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bootstrap remote state (S3 + DynamoDB)
        env:
          BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TABLE:  ${{ secrets.TF_STATE_TABLE }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail

          # --- Sanitize and validate region ---
          REGION="$(printf '%s' "${REGION:-}" | tr -d '\"' | xargs)"   # strip quotes/whitespace
          if [ -z "${BUCKET:-}" ] || [ -z "${TABLE:-}" ] || [ -z "${REGION:-}" ]; then
            echo "::error::Missing TF_STATE_BUCKET / TF_STATE_TABLE / AWS_REGION"; exit 1
          fi
          echo "Using REGION=${REGION}"

          # Allowlist of common commercial regions (adjust if you use others)
          case "${REGION}" in
            us-east-1|us-east-2|us-west-1|us-west-2|ca-central-1|eu-central-1|eu-west-1|eu-west-2|eu-west-3|eu-north-1|eu-south-1|eu-south-2|eu-central-2|ap-south-1|ap-south-2|ap-southeast-1|ap-southeast-2|ap-southeast-3|ap-southeast-4|ap-northeast-1|ap-northeast-2|ap-northeast-3|ap-east-1|sa-east-1|me-south-1|af-south-1) ;;
            *) echo "::error::AWS_REGION looks invalid: ${REGION}"; exit 1 ;;
          esac

          # --- Create S3 bucket if absent ---
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket ${BUCKET} already exists."
            # Optional: verify it's in the same region
            LOC=$(aws s3api get-bucket-location --bucket "$BUCKET" --query 'LocationConstraint' --output text || true)
            # S3 returns 'None' for us-east-1
            if [ "${LOC}" = "None" ]; then LOC="us-east-1"; fi
            if [ -n "${LOC}" ] && [ "${LOC}" != "${REGION}" ]; then
              echo "::error::Bucket ${BUCKET} exists in ${LOC}, but AWS_REGION is ${REGION}. Use a different BUCKET name or align regions."; exit 1
            fi
          else
            echo "Creating bucket ${BUCKET} in ${REGION}..."
            if [ "${REGION}" = "us-east-1" ]; then
              # IMPORTANT: no create-bucket-configuration for us-east-1
              aws s3api create-bucket --bucket "$BUCKET" --region "${REGION}"
            else
              aws s3api create-bucket \
                --bucket "$BUCKET" \
                --region "${REGION}" \
                --create-bucket-configuration LocationConstraint="${REGION}"
            fi
            aws s3api put-bucket-versioning --bucket "$BUCKET" \
              --versioning-configuration Status=Enabled --region "${REGION}"
            aws s3api put-bucket-encryption --bucket "$BUCKET" --region "${REGION}" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            aws s3api put-public-access-block --bucket "$BUCKET" --region "${REGION}" \
              --public-access-block-configuration 'BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true'
          fi

          # --- Create DynamoDB lock table if absent ---
          if ! aws dynamodb describe-table --table-name "$TABLE" --region "${REGION}" >/dev/null 2>&1; then
            echo "Creating DynamoDB table ${TABLE} in ${REGION}..."
            aws dynamodb create-table --table-name "$TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "${REGION}"
            aws dynamodb wait table-exists --table-name "$TABLE" --region "${REGION}"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=terraform/devsecops-cicd/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        env:
          TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
        run: terraform apply -auto-approve -input=false
