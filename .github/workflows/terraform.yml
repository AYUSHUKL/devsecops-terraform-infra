name: terraform

on:
  pull_request:
  push:
    branches: [ "main" ]

permissions:
  id-token: write   # needed for 
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  TF_STATE_TABLE: ${{ secrets.TF_STATE_TABLE }}

jobs:
  terraform:
    name: Terraform Plan/Apply
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bootstrap remote state (S3 + DynamoDB)
  env:
    BUCKET: ${{ secrets.TF_STATE_BUCKET }}
    TABLE:  ${{ secrets.TF_STATE_TABLE }}
    REGION: ${{ secrets.AWS_REGION }}
  run: |
    set -euo pipefail

    echo "Using REGION=${REGION}"
    if [ -z "${BUCKET:-}" ] || [ -z "${TABLE:-}" ] || [ -z "${REGION:-}" ]; then
      echo "::error::Missing TF_STATE_BUCKET / TF_STATE_TABLE / AWS_REGION"; exit 1
    fi

    # If bucket exists but in another region, fail fast with a clear message
    if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
      echo "Bucket ${BUCKET} already exists (good)."
    else
      echo "Creating bucket ${BUCKET} in ${REGION}..."
      if [ "${REGION}" = "us-east-1" ]; then
        aws s3api create-bucket --bucket "$BUCKET" --region "${REGION}"
      else
        aws s3api create-bucket \
          --bucket "$BUCKET" \
          --region "${REGION}" \
          --create-bucket-configuration LocationConstraint="${REGION}"
      fi

      aws s3api put-bucket-versioning --bucket "$BUCKET" \
        --versioning-configuration Status=Enabled --region "${REGION}"

      aws s3api put-bucket-encryption --bucket "$BUCKET" --region "${REGION}" \
        --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'

      aws s3api put-public-access-block --bucket "$BUCKET" --region "${REGION}" \
        --public-access-block-configuration 'BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true'
    fi

    # Create DynamoDB lock table if absent
    if ! aws dynamodb describe-table --table-name "$TABLE" --region "${REGION}" >/dev/null 2>&1; then
      echo "Creating DynamoDB table ${TABLE} in ${REGION}..."
      aws dynamodb create-table --table-name "$TABLE" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST \
        --region "${REGION}"
      aws dynamodb wait table-exists --table-name "$TABLE" --region "${REGION}"
    fi
i

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=terraform/devsecops-cicd/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
